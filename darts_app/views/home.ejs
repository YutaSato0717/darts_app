

<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
   
  <title><%= title %></title>
  <link rel='stylesheet' href='/stylesheets/style.css'/>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <style>
    
    .button {
      display: inline-block;
      padding: 10px 20px;
      background-color: #1abc9c; /* ボタンの背景色を指定 */
      color: #fff; /* テキストの色を指定 */
      text-decoration: none;
      border-radius: 5px; /* 角丸にする */
      font-weight: bold;
    }

    .button:hover {
      background-color: #12a789; /* マウスオーバー時の背景色を指定 */
    }

    nav {
  margin: 0px auto 0;

  position: relative;
  width: 590px;
  height: 50px;
  background-color: #565758;
  border-radius: 8px;
  font-size: 0;
}
nav a {
  line-height: 50px;
  height: 100%;
  font-size: 15px;
  display: inline-block;
  position: relative;
  z-index: 1;
  text-decoration: none;
  text-transform: uppercase;
  text-align: center;
  color: white;
  cursor: pointer;
}
nav .animation {
  position: absolute;
  height: 100%;
  top: 0;
  z-index: 0;
  transition: all .5s ease 0s;
  border-radius: 8px;
}
a:nth-child(1) {
  width: 100px;
}
a:nth-child(2) {
  width: 110px;
}
a:nth-child(3) {
  width: 100px;
}
a:nth-child(4) {
  width: 160px;
}
a:nth-child(5) {
  width: 120px;
}
nav .start-home, a:nth-child(1):hover~.animation {
  width: 100px;
  left: 0;
  background-color: #1abc9c;
}
nav .start-about, a:nth-child(2):hover~.animation {
  width: 100px;
  left: 100px;
  background-color: #c54444;
}
nav .start-blog, a:nth-child(3):hover~.animation {
  width: 120px;
  left: 200px;
  background-color: #5858c2;
}
nav .start-portefolio, a:nth-child(4):hover~.animation {
  width: 120px;
  left: 330px;
  background-color: #71cb71;
}
nav .start-contact, a:nth-child(5):hover~.animation {
  width: 120px;
  left: 470px;
  background-color: #1abc9c;
}

body {
  font-size: 12px;
  font-family: sans-serif;
  background-color: #191919;
  color: #ecf0f1;
}
h1 {
  text-align: center;
  margin: 40px 0 40px;
  text-align: center;
  font-size: 30px;
  color: #ecf0f1;
  text-shadow: 2px 2px 4px #000000;
  
}



p {
    position: absolute;
    bottom: 20px;
    width: 100%;
    text-align: center;
    color: #ecf0f1;
    font-family: 'Cherry Swash',cursive;
    font-size: 16px;
}

span {
    color: #2BD6B4;
}

.centered-content h2 {
    display: inline;
    margin-right: 10px; /* 適宜調整 */
  }

  .zeroone-stats {
    color: #c54444; /* 01 Statsの色（例: 赤色） */
  }

  .cricket-stats {
    color: #5858c2; /* Cricket Statsの色（例: 緑色） */
  }

  .highest-countup-score {
    color: #71cb71; /* Highest Countup Scoreの色（例: 青色） */
  }

  .average-countup-score {
    color: #71cb71; /* Average Countup Scoreの色（例: オレンジ色） */
  }

  .centered-content h1 {
    display: inline;
  }

  #line-chart {
      border: 1px #ccc solid;
      display: inline-block;
    }
  </style>
</head>
<body>
<%- include('./error_messages'); %>
<% if(isAuth) { %>
  
  <nav>
    <a href="/">Home</a>
    <a href="/zeroone">01</a>
    <a href="/cricket">Cricket</a>
    <a href="/countup">Count Up</a>
    <a href="/logout">Logout</a>
    <div class="animation start-home"></div>
    </nav>
<br>

<h1>Your Data[]</h1>

  <div class="centered-content">
    <h2 class="zeroone-stats"> 01  </h2><h1><%= average01Stats.toFixed(2) %></h1><h1> (WIN <%= (win01*100).toFixed(1) %>%)</h1>
    <br>
    <div id="line-chart"></div>
    <br>
    <h2 class="cricket-stats"> CRICKET </h2> <h1><%= averageCricketStats.toFixed(2) %></h1><h1> (WIN <%= (winCricket*100).toFixed(1) %>%)</h1>
    <br>
    <h2 class="average-countup-score">COUNTUP  </h2><h1><%= averageCountupScore.toFixed(2) %></h1><h1> (MAX <%= highestCountupScore %>)</h1>
    <br> 
  <ul>
    <% if (user01Games && user01Games.length > 0) { %>
      <% for (const game of user01Games) { %>
        <li>Stats or Score: <%= game.stats_or_score.toFixed(2) %></li>
      <% } %>
    <% } else { %>
      <li>No games to display.</li>
    <% } %>
  </ul>

  <ul>
    <% if (userCricketGames && userCricketGames.length > 0) { %>
      <% for (const game of userCricketGames) { %>
        <li>Stats or Score: <%= game.stats_or_score.toFixed(2) %></li>
      <% } %>
    <% } else { %>
      <li>No games to display.</li>
    <% } %>
  </ul>
  
  <ul>
    <% if (userCountupGames && userCountupGames.length > 0) { %>
      <% for (const game of userCountupGames) { %>
        <li>Stats or Score: <%= game.stats_or_score.toFixed(2) %></li>
      <% } %>
    <% } else { %>
      <li>No games to display.</li>
    <% } %>
  </ul>
  
  <script>
      (function (d3) {
        const lineChartData = [
    {
      currency: "USD",
      values: [
        {
          date: "2018/01/01",
          close: 230
        },
        {
          date: "2018/02/01",
          close: 269
        },
        {
          date: "2018/03/01",
          close: 234 
        },
        {
          date: "2018/04/01",
          close: 282 
        },
        {
          date: "2018/05/01",
          close: 231 
        },
        {
          date: "2018/06/01",
          close: 240 
        },
        {
          date: "2018/07/01",
          close: 213 
        },
        {
          date: "2018/08/01",
          close: 320 
        },
        {
          date: "2018/09/01",
          close: 253 
        },
        {
          date: "2018/10/01",
          close: 264 
        },
        {
          date: "2018/11/01",
          close: 272
        },
        {
          date: "2018/12/01",
          close: 290
        }
      ]
    }
  ];

  const margin = {
    top: 20,
    bottom: 20,
    left: 50,
    right: 20
  };

  const width = 700 - margin.left - margin.right;
  const height = 300 - margin.top - margin.bottom;
  
  const createGradient = select => {
    const gradient = select
      .select('defs')
        .append('linearGradient')
          .attr('id', 'gradient')
          .attr('x1', '0%')
          .attr('y1', '100%')
          .attr('x2', '0%')
          .attr('y2', '0%');

    gradient
      .append('stop')
        .attr('offset', '0%')
        .attr('style', 'stop-color:#BBF6CA;stop-opacity:0.05');

    gradient
      .append('stop')
        .attr('offset', '100%')
        .attr('style', 'stop-color:#BBF6CA;stop-opacity:.5');
  }
  
  const createGlowFilter = select => {
    const filter = select
      .select('defs')
        .append('filter')
          .attr('id', 'glow')

    filter
      .append('feGaussianBlur')
        .attr('stdDeviation', '4')
        .attr('result', 'coloredBlur');
    
    const femerge = filter
      .append('feMerge');
    
    femerge
      .append('feMergeNode')
      .attr('in', 'coloredBlur');
    femerge
      .append('feMergeNode')
      .attr('in', 'SourceGraphic');
  }

  const svg = d3.select('#line-chart')
    .append('svg')
      .attr('width', 700 + margin.left + margin.right)
      .attr('height', 300 + margin.top + margin.bottom)
    .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);
  
  svg.append('defs');
  svg.call(createGradient);
  svg.call(createGlowFilter);

  const parseTime = d3.timeParse('%Y/%m/%d');
  
  const parsedData = lineChartData.map(company => ({
    ticker: company.ticker,
    values: company.values.map(val => ({
      close: val.close,
      date: parseTime(val.date)
    }))
  }));

  const xScale = d3.scaleTime()
    .domain([
      d3.min(parsedData, d => d3.min(d.values, v => v.date)),
      d3.max(parsedData, d => d3.max(d.values, v => v.date))
    ])
    .range([0, width]);
  
  const yScale = d3.scaleLinear()
    .domain([
      d3.min(parsedData, d => d3.min(d.values, v => v.close)),
      d3.max(parsedData, d => d3.max(d.values, v => v.close))
    ])
    .range([height, 0]);
  
  const line = d3.line()
    .x(d => xScale(d.date))
    .y(d => yScale(d.close))
    .curve(d3.curveCatmullRom.alpha(0.5));
  
  svg.selectAll('.line')
    .data(parsedData)
    .enter()
    .append('path')
      .attr('d', d => {
        const lineValues = line(d.values).slice(1);
        const splitedValues = lineValues.split(',');
    
        return `M0,${height},${lineValues},l0,${height - splitedValues[splitedValues.length - 1]}`
      })
      .style('fill', 'url(#gradient)')
  
  svg.selectAll('.line')
    .data(parsedData)
    .enter()
    .append('path')
      .attr('d', d => line(d.values))
      .attr('stroke-width', '2')
      .style('fill', 'none')
      .style('filter', 'url(#glow)')
      .attr('stroke', '#47D3DE');
  
  function setFade(selection, opacity) {
    selection.style('opacity', opacity);
  }
  
  const tick = svg.append('g')
    .attr('transform', `translate(0, ${height})`)
    .call(d3.axisBottom(xScale).ticks(12))
    .selectAll('.tick')
    .style('transition', '.2s');

  tick
    .selectAll('line')
      .attr('stroke-dasharray', `5, 5`)
      .attr('stroke', '#ccc')
      .attr('y2', `-${height}px`)
  
  tick
    .append('rect')
      .attr('width', `${(width / 12) + 10}px`)
      .attr('x', `-${width / 24 + 5}px`)
      .attr('y', `-${height}px`)
      .attr('height', `${height + 30}px`)
      .style('cursor', 'pointer')
      .style('fill', 'transparent');
    
  svg.selectAll('.tick')
    .append('circle')
      .attr('r', '4px')
      .style('fill', '#72B9FF')
      .attr('cy', (x, i) => - height + yScale(parsedData[0].values[i].close));
  
  tick
    .on('mouseout', function (data, index, elements) {
      d3.selectAll(elements)
        .call(setFade, 1);
    })
    .on('mouseover', function (data, index, elements) {
      d3.selectAll(elements)
        .filter(':not(:hover)')
        .call(setFade, 0.2);
    });
  
  svg.select('.domain')
    .attr('stroke', '#ddd')
      })(d3);
  </script>
 
  </div>


<% } else { %>
  <div class="centered-content">
    <h1>Welcome to the Darts_App</h1>
    <br>
    <a href="/signup" class="button">Sign up</a>
    <br>
    <a href="/signin" class="button">Sign in</a>
  </div>
<% } %>


</body>
</html>

