

<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
   
  <title><%= title %></title>
  <link rel='stylesheet' href='/stylesheets/style.css'/>
  <link rel="icon" href="/routes/favicon.ico">
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <style>
    
    .button {
        display: inline-block;
        padding: 10px 20px;
        background-color: #1abc9c;
        color: #fff;
        text-decoration: none;
        border-radius: 5px;
        font-weight: bold;
        width: 150px; /* ここにボタンの幅を指定 */
        text-align: center; /* ボタンのテキストを中央に配置 */
    }

    .button:hover {
        background-color: #12a789;
    }

    nav {
  margin: 0px auto 0;

  position: relative;
  width: 590px;
  height: 50px;
  background-color: #565758;
  border-radius: 8px;
  font-size: 0;
}
nav a {
  line-height: 50px;
  height: 100%;
  font-size: 15px;
  display: inline-block;
  position: relative;
  z-index: 1;
  text-decoration: none;
  text-transform: uppercase;
  text-align: center;
  color: white;
  cursor: pointer;
}
nav .animation {
  position: absolute;
  height: 100%;
  top: 0;
  z-index: 0;
  transition: all .5s ease 0s;
  border-radius: 8px;
}
a:nth-child(1) {
  width: 100px;
}
a:nth-child(2) {
  width: 110px;
}
a:nth-child(3) {
  width: 100px;
}
a:nth-child(4) {
  width: 160px;
}
a:nth-child(5) {
  width: 120px;
}
nav .start-home, a:nth-child(1):hover~.animation {
  width: 100px;
  left: 0;
  background-color: #1abc9c;
}
nav .start-about, a:nth-child(2):hover~.animation {
  width: 100px;
  left: 100px;
  background-color: #c54444;
}
nav .start-blog, a:nth-child(3):hover~.animation {
  width: 120px;
  left: 200px;
  background-color: #5858c2;
}
nav .start-portefolio, a:nth-child(4):hover~.animation {
  width: 120px;
  left: 330px;
  background-color: #71cb71;
}
nav .start-contact, a:nth-child(5):hover~.animation {
  width: 120px;
  left: 470px;
  background-color: #1abc9c;
}

body {
  font-size: 12px;
  font-family: sans-serif;
  background-color: #191919;
  color: #ecf0f1;
}
h1 {
  text-align: center;
  margin: 40px 0 40px;
  text-align: center;
  font-size: 30px;
  color: #ecf0f1;
  text-shadow: 2px 2px 4px #000000;
  
}



p {
    position: absolute;
    bottom: 20px;
    width: 100%;
    text-align: center;
    color: #ecf0f1;
    font-family: 'Cherry Swash',cursive;
    font-size: 16px;
}

span {
    color: #2BD6B4;
}

.centered-content h2 {
    display: inline;
    margin-right: 10px; /* 適宜調整 */
  }

  .zeroone-stats {
    color: #c54444; /* 01 Statsの色（例: 赤色） */
  }

  .cricket-stats {
    color: #5858c2; /* Cricket Statsの色（例: 緑色） */
  }

  .highest-countup-score {
    color: #71cb71; /* Highest Countup Scoreの色（例: 青色） */
  }

  .average-countup-score {
    color: #71cb71; /* Average Countup Scoreの色（例: オレンジ色） */
  }

  .centered-content h1 {
    display: inline;
  }

    
    @keyframes rotateAndFade {
            0% {
                transform: rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: rotate(360deg);
                opacity: 0;
            }
        }

        #rotating-image {
            max-width: 100%;
            max-height: 80%;
            animation: rotateAndFade 1s linear 1s 1 normal forwards; /* 2秒かけて360度回転し、その後フェードアウト */
        }

        #splash-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #ffffff;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 1;
            transition: opacity 0.5s ease-out;
            z-index: 9999;
        }

        #splash-screen.hidden {
            opacity: 0;
            pointer-events: none;
            z-index: -1;
        }

        #splash-content {
            text-align: center;
        }


  #line-chart {
      border: 2px #ccc solid;
      display: inline-block;
    }
    #line-chart2 {
      border: 2px #ccc solid;
      display: inline-block;
    }

    #line-chart3{
      border: 2px #ccc solid;
      display: inline-block;
    }
     
       .line {
         stroke: #ff5733; /* グラフの線の色を変更 */
          }
          .line2 {
         stroke: #5858c2; /* グラフの線の色を変更 */
          }
          .line3 {
         stroke: #71cb71; /* グラフの線の色を変更 */
          }
        .axis path,
.axis line {
 
  stroke: #fff; /* 軸の線の色を変更 */
}


  </style>
</head>
<body>
<%- include('./error_messages'); %>
<div class="centered-content">
  
<% if(isAuth) { %>

  <nav>
    <a href="/">Home</a>
    <a href="/zeroone">01</a>
    <a href="/cricket">Cricket</a>
    <a href="/countup">Count Up</a>
    <a href="/logout">Logout</a>
    <div class="animation start-home"></div>
    </nav>
<br>

<h1>Your Data[<%= username.name %>]</h1>
<br>
<br>

  <div class="centered-content">
    <h2 class="zeroone-stats"> 01  </h2><h1><%= average01Stats.toFixed(2) %></h1><h1> (WIN <%= (win01*100).toFixed(1) %>%)</h1>
    <br>
    <h2>Data from the last 10 games</h2>
    <br>
    <h3> <% if (user01Games && user01Games.length > 9) { %>
      <% for (const game of user01Games.reverse()) { %>
        <%= game.stats_or_score.toFixed(2) %>　 
      <% } %>
      <br>
      <div id="line-chart"></div>
      <br>
      <h3>10回前　 9回前　 8回前　 7回前　　6回前　 5回前　　4回前　 3回前　　2回前　　1回前</h3>
      <% } else { %>
      <h3>It shows up after 10 matches.</h3>
      <% } %> 
    </h3>

    <br>
    <br>
    <h2 class="cricket-stats"> CRICKET </h2> <h1><%= averageCricketStats.toFixed(2) %></h1><h1> (WIN <%= (winCricket*100).toFixed(1) %>%)</h1>
    <br>
    <h2>Data from the last 10 games</h2>
<br>
    <h3><% if (userCricketGames && userCricketGames.length > 9) { %>
      <% for (const game of userCricketGames.reverse()) { %>
        <%= game.stats_or_score.toFixed(2) %> 　
      <% } %>
      <br>
      <div id="line-chart2"></div>
      <br>
      <h3>10回前　9回前　 8回前　 7回前　　6回前　 5回前　　4回前　 3回前　　2回前　　1回前</h3>
    <% } else { %>
      <h3>It shows up after 10  matches.</h3>
    <% } %>
  </h3>

    
    <br>
    <br>
    <h2 class="average-countup-score">COUNTUP  </h2><h1><%= averageCountupScore.toFixed(2) %></h1><h1> (MAX <%= highestCountupScore %>)</h1>
    <br> 
    <h2>Data from the last 10 games</h2>
    <h3>
      <% if (userCountupGames && userCountupGames.length > 9) { %>
        <% for (const game of userCountupGames) { %>
          <%= game.stats_or_score.toFixed(0) %>　　
        <% } %>
        <br>
      <div id="line-chart3"></div>
        <br>
        <h3>10回前　 9回前　 8回前　 7回前　　6回前　 5回前　　4回前　 3回前　　2回前　　1回前</h3>
      <% } else { %>
        <h3>It shows up after 10  matches.</h3>
      <% } %>
    </h3>
  </div>

  <script>
   document.addEventListener("DOMContentLoaded", function () {
  var data = [
    <% if (user01Games && user01Games.length > 0) { %>
      <% for (let i = 0; i < user01Games.length; i++) { %>
        <%= user01Games[i].stats_or_score.toFixed(2) %>,
      <% } %>
    <% } %>
  ];

  var width = 550;
  var height = 200;

  var svg = d3.select('#line-chart').append('svg')
    .attr('width', width)
    .attr('height', height)
    .attr('class', 'chart-svg');

  var xScale = d3.scaleLinear()
    .domain([0, data.length - 1])
    .range([0, width]);

  var yScale = d3.scaleLinear()
    .domain([0, d3.max(data)])
    .range([height, 0]);

  var line = d3.line()
    .x(function (d, i) { return xScale(i); })
    .y(function (d) { return yScale(d); });

  // グラフの描画
  svg.append('path')
    .data([data])
    .attr('class', 'line')
    .attr('d', line)
    .style("stroke-width", 3);

  // Y軸を追加
  svg.append('g')
    .call(d3.axisLeft(yScale));

  // Y軸にラベルを追加
  svg.append("text")
    .attr("transform", "rotate(-90)")
    .attr("y", 0 - margin.left)
    .attr("x", 0 - height / 2)
    .attr("dy", "1em")
    .style("text-anchor", "middle")
    .text("Your Y-axis Label Here"); // ラベルを追加するテキストを指定
});

  </script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    var data2 = [
    <% if (userCricketGames && userCricketGames.length > 0) { %>
      <% for (let i = 0; i < userCricketGames.length; i++) { %>
        <%= userCricketGames[i].stats_or_score.toFixed(2) %>,
      <% } %>
    <% } %>
    ];

    var width = 550;
    var height = 200;

    var svg2 = d3.select('#line-chart2').append('svg')
      .attr('width', width)
      .attr('height', height)
      .attr('class', 'chart-svg');

    var xScale2 = d3.scaleLinear()
      .domain([0, data2.length - 1])
      .range([0, width]);

    var yScale2 = d3.scaleLinear()
      .domain([0, d3.max(data2)])
      .range([height, 0]);

    var line2 = d3.line()
      .x(function (d, i) { return xScale2(i); })
      .y(function (d) { return yScale2(d); });

    // グラフの描画
    svg2.append('path')
      .data([data2])
      .attr('class', 'line2')
      .attr('d', line2)
      .style("stroke-width", 3);

    // Y軸を追加
    svg2.append('g')
      .call(d3.axisLeft(yScale2));

    // Y軸にラベルを追加
    svg2.append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 0 - margin.left)
      .attr("x", 0 - height / 2)
      .attr("dy", "1em")
      .style("text-anchor", "middle")
      .text("Your Y-axis Label Here");
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    var data3 = [
    <% if (userCountupGames && userCountupGames.length > 0) { %>
      <% for (let i = 0; i < userCountupGames.length; i++) { %>
        <%= userCountupGames[i].stats_or_score.toFixed(2) %>,
      <% } %>
    <% } %>
    ];

    var width = 550;
    var height = 200;

    var svg3 = d3.select('#line-chart3').append('svg')
      .attr('width', width)
      .attr('height', height)
      .attr('class', 'chart-svg');

    var xScale3 = d3.scaleLinear()
      .domain([0, data3.length - 1])
      .range([0, width]);

    var yScale3 = d3.scaleLinear()
      .domain([0, d3.max(data3)])
      .range([height, 0]);

    var line3 = d3.line()
      .x(function (d, i) { return xScale3(i); })
      .y(function (d) { return yScale3(d); });

    // グラフの描画
    svg3.append('path')
      .data([data3])
      .attr('class', 'line3')
      .attr('d', line3)
      .style("stroke-width", 3);

    // Y軸を追加
    svg3.append('g')
      .call(d3.axisLeft(yScale3));

    // Y軸にラベルを追加
    svg3.append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 0 - margin.left)
      .attr("x", 0 - height / 2)
      .attr("dy", "1em")
      .style("text-anchor", "middle")
      .text("Your Y-axis Label Here");
  });
</script>

<% } else { %>
  <div class="centered-content">
    <div id="splash-screen">
      <div id="splash-content">
        <img id="rotating-image" src="https://media.discordapp.net/attachments/1175514115414970471/1175514281454882936/AizuDarts.png?ex=656b81fc&is=65590cfc&hm=bf8cade18bdbb1d71c1a0d324de3742f1f2c6683c077f83b7b4db3692b454140&=&width=986&height=986" alt="AizuDarts.png">
        <!-- Add additional content or loading animation here -->
      </div>
    </div>
    <h1>Let's record the darts !</h1>
    <br>
    <br>
    <br>
    <a href="/signup" class="button">Sign up</a>
    <br>
    <a href="/signin" class="button">Sign in</a>
  </div>
<% } %>

<script>
 document.addEventListener("DOMContentLoaded", function () {
        var splashScreen = document.getElementById('splash-screen');
        var rotatingImage = document.getElementById('rotating-image');

        splashScreen.style.opacity = '1';
        
        // 2秒かけて360度回転
        rotatingImage.style.animationDuration = '1s';
        
        // 回転終了時にフェードアウト
        rotatingImage.addEventListener('animationend', function () {
            splashScreen.style.opacity = '0';

            // スプラッシュスクリーンを非表示にする
            setTimeout(function () {
                splashScreen.style.display = 'none';
            }, 500);
        });
    });
</script>
</body>
</html>

