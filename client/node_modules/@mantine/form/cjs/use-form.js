'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var isEqual = require('fast-deep-equal');
var filterErrors = require('./filter-errors/filter-errors.js');
var shouldValidateOnChange = require('./validate/should-validate-on-change.js');
var getPath = require('./paths/get-path.js');
var setPath = require('./paths/set-path.js');
var validateFieldValue = require('./validate/validate-field-value.js');
var reorderPath = require('./paths/reorder-path.js');
var removePath = require('./paths/remove-path.js');
var clearListState = require('./clear-list-state/clear-list-state.js');
var insertPath = require('./paths/insert-path.js');
var validateValues = require('./validate/validate-values.js');
var getStatus = require('./get-status/get-status.js');
var getInputOnChange = require('./get-input-on-change/get-input-on-change.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
function useForm({
  initialValues = {},
  initialErrors = {},
  initialDirty = {},
  initialTouched = {},
  clearInputErrorOnChange = true,
  validateInputOnChange = false,
  validateInputOnBlur = false,
  validate: rules
} = {}) {
  const [touched, setTouched] = React.useState(initialTouched);
  const [dirty, setDirty] = React.useState(initialDirty);
  const [values, _setValues] = React.useState(initialValues);
  const [errors, _setErrors] = React.useState(filterErrors.filterErrors(initialErrors));
  const _dirtyValues = React.useRef(initialValues);
  const _setDirtyValues = (_values) => {
    _dirtyValues.current = _values;
  };
  const resetTouched = React.useCallback(() => setTouched({}), []);
  const resetDirty = (_values) => {
    _setDirtyValues(_values || values);
    setDirty({});
  };
  const setErrors = React.useCallback((errs) => _setErrors((current) => filterErrors.filterErrors(typeof errs === "function" ? errs(current) : errs)), []);
  const clearErrors = React.useCallback(() => _setErrors({}), []);
  const reset = React.useCallback(() => {
    _setValues(initialValues);
    clearErrors();
    resetDirty(initialValues);
    resetTouched();
  }, []);
  const setFieldError = React.useCallback((path, error) => setErrors((current) => __spreadProps(__spreadValues({}, current), { [path]: error })), []);
  const clearFieldError = React.useCallback((path) => setErrors((current) => {
    if (typeof path !== "string") {
      return current;
    }
    const clone = __spreadValues({}, current);
    delete clone[path];
    return clone;
  }), []);
  const setFieldValue = React.useCallback((path, value) => {
    const shouldValidate = shouldValidateOnChange.shouldValidateOnChange(path, validateInputOnChange);
    _setValues((current) => {
      const initialValue = getPath.getPath(path, _dirtyValues.current);
      const isFieldDirty = !isEqual__default(initialValue, value);
      setDirty((currentDirty) => __spreadProps(__spreadValues({}, currentDirty), { [path]: isFieldDirty }));
      setTouched((currentTouched) => __spreadProps(__spreadValues({}, currentTouched), { [path]: true }));
      const result = setPath.setPath(path, value, current);
      if (shouldValidate) {
        const validationResults = validateFieldValue.validateFieldValue(path, rules, result);
        validationResults.hasError ? setFieldError(path, validationResults.error) : clearFieldError(path);
      }
      return result;
    });
    !shouldValidate && clearInputErrorOnChange && setFieldError(path, null);
  }, []);
  const setValues = React.useCallback((payload) => {
    _setValues(payload);
    clearInputErrorOnChange && clearErrors();
  }, []);
  const reorderListItem = React.useCallback((path, payload) => _setValues((current) => reorderPath.reorderPath(path, payload, current)), []);
  const removeListItem = React.useCallback((path, index) => {
    _setValues((current) => removePath.removePath(path, index, current));
    _setErrors((errs) => clearListState.clearListState(path, errs));
    setDirty((current) => clearListState.clearListState(`${String(path)}.${index}`, current));
  }, []);
  const insertListItem = React.useCallback((path, item, index) => _setValues((current) => insertPath.insertPath(path, item, index, current)), []);
  const validate = React.useCallback(() => {
    const results = validateValues.validateValues(rules, values);
    _setErrors(results.errors);
    return results;
  }, [values, rules]);
  const validateField = React.useCallback((path) => {
    const results = validateFieldValue.validateFieldValue(path, rules, values);
    results.hasError ? setFieldError(path, results.error) : clearFieldError(path);
    return results;
  }, [values, rules]);
  const getInputProps = (path, { type = "input", withError = type === "input", withFocus = true } = {}) => {
    const onChange = getInputOnChange.getInputOnChange((value) => setFieldValue(path, value));
    const payload = { onChange };
    if (withError) {
      payload.error = errors[path];
    }
    if (type === "checkbox") {
      payload.checked = getPath.getPath(path, values);
    } else {
      payload.value = getPath.getPath(path, values);
    }
    if (withFocus) {
      payload.onFocus = () => setTouched((current) => __spreadProps(__spreadValues({}, current), { [path]: true }));
      payload.onBlur = () => {
        if (shouldValidateOnChange.shouldValidateOnChange(path, validateInputOnBlur)) {
          const validationResults = validateFieldValue.validateFieldValue(path, rules, values);
          validationResults.hasError ? setFieldError(path, validationResults.error) : clearFieldError(path);
        }
      };
    }
    return payload;
  };
  const onSubmit = (handleSubmit, handleValidationFailure) => (event) => {
    event.preventDefault();
    const results = validate();
    if (results.hasErrors) {
      handleValidationFailure == null ? void 0 : handleValidationFailure(results.errors, values, event);
    } else {
      handleSubmit(values, event);
    }
  };
  const onReset = React.useCallback((event) => {
    event.preventDefault();
    reset();
  }, []);
  const isDirty = React.useCallback((path) => getStatus.getStatus(dirty, path), [dirty]);
  const isTouched = React.useCallback((path) => getStatus.getStatus(touched, path), [touched]);
  const isValid = React.useCallback((path) => path ? !validateFieldValue.validateFieldValue(path, rules, values).hasError : !validateValues.validateValues(rules, values).hasErrors, [values, rules]);
  return {
    values,
    errors,
    setValues,
    setErrors,
    setFieldValue,
    setFieldError,
    clearFieldError,
    clearErrors,
    reset,
    validate,
    validateField,
    reorderListItem,
    removeListItem,
    insertListItem,
    getInputProps,
    onSubmit,
    onReset,
    isDirty,
    isTouched,
    setTouched,
    setDirty,
    resetTouched,
    resetDirty,
    isValid
  };
}

exports.useForm = useForm;
//# sourceMappingURL=use-form.js.map
